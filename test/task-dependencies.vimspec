Describe Task dependencies
    Before each
        call PrepareForTest()
    End

    It Dependant tasks
        CreateTasksfile
        @task
        def foo(ctx):
            with open('foo', 'w') as f:
                f.write('hello')

        @task(foo)
        def bar(ctx):
            BANG('cp', 'foo', 'bar')
.
        echo 'hi'

        Assert !filereadable('foo')
        Assert !filereadable('bar')
        OP foo
        Assert Equals(readfile('foo'), ['hello'])
        Assert !filereadable('bar')

        call delete('foo')
        Assert !filereadable('foo')
        OP bar
        Assert Equals(readfile('foo'), ['hello'])
        Assert Equals(readfile('bar'), ['hello'])
    End

    It Pass data
        CreateTasksfile
        @task
        def foo(ctx):
            ctx.pass_data('hello')

        @task(foo)
        def bar(ctx):
            assert ctx.dep.foo == 'hello'
.
        OP bar
    End

    It Options task
        CreateTasksfile
        @task.options
        def thing(ctx):
            foo = 'FOO'
            bar = 'BAR'
            baz = 'BAZ'

        @task(thing)
        def check(ctx, value):
            assert ctx.dep.thing == value
.
        OP thing foo
        OP check FOO

        OP thing bar
        OP check BAR

        OP thing baz
        OP check BAZ
    End

    It Multi options task
        CreateTasksfile
        @task.options_multi
        def thing(ctx):
            foo = 'FOO'
            bar = 'BAR'
            baz = 'BAZ'

        @task(thing)
        def check(ctx, *value):
            assert ctx.dep.thing == list(value)
.
        OP thing foo
        OP check FOO

        OP thing foo bar
        OP check FOO BAR

        OP thing bar foo
        OP check BAR FOO

        OP thing bar baz foo
        OP check BAR BAZ FOO
    End

    It Generator options task
        CreateTasksfile
        @task.options
        def thing(ctx):
            ctx.key(str.lower)
            yield 'FOO'
            yield 'BAR'
            yield 'BAZ'

        @task(thing)
        def check(ctx, value):
            assert ctx.dep.thing == value
.
        OP thing foo
        OP check FOO

        OP thing bar
        OP check BAR

        OP thing baz
        OP check BAZ
    End

    It Pass data with argument defaults
        CreateTasksfile
        @task
        def foo(ctx):
            ctx.pass_data('foo-data')


        @task
        def bar(ctx):
            ctx.pass_data('bar-data')


        @task
        def baz(ctx, foo=foo, bar=bar):
            assert foo == 'foo-data'
            assert bar == 'bar-data'
.

        OP baz
    End

    It Pass data with argument defaults to options task
        CreateTasksfile
        @task
        def foo(ctx):
            ctx.pass_data('foo-data')


        @task
        def bar(ctx):
            ctx.pass_data('bar-data')


        @task.options
        def baz(ctx, foo=foo, bar=bar):
            a = foo
            b = bar

        # @task
        # def qux(ctx, expected, baz=baz):
        #     assert baz == expected
.

        OP foo
        " OP baz a
        " OP qux foo-data

        " OP baz b
        " OP qux bar-data
    End

    It Pass data with argument defaults after vararg
        CreateTasksfile
        @task
        def foo(ctx):
            ctx.pass_data('foo-data')


        @task
        def bar(ctx):
            ctx.pass_data('bar-data')


        @task
        def baz(ctx, *args, foo=foo, bar=bar):
            assert list(args) == [foo, bar]
.
        ForPythonVersionOnly 3

        OP baz foo-data bar-data
    End

    It Cache option choosen value
    CreateTasksfile
        x = 1
        y = 1

        @task.options
        def foo(ctx):
            global x
            ctx.key(str)
            x += 1
            yield 'f'

        @task.options(cache_choice_value=True)
        def bar(ctx):
            global y
            ctx.key(str)
            y += 1
            yield 'b'

        @task
        def check(ctx, target_x, target_y, foo=foo, bar=bar):
            assert foo == 'f'
            assert bar == 'b'
            assert x == int(target_x)
            assert y == int(target_y)
.
        OP check 2 2
        OP check 3 2
        OP bar
        OP check 4 3
    End

    It Cache multi_option choosen value
    CreateTasksfile
        x = 1
        y = 1

        @task.options_multi
        def foo(ctx):
            global x
            ctx.key(str)
            x += 1
            yield 'f'

        @task.options_multi(cache_choice_value=True)
        def bar(ctx):
            global y
            ctx.key(str)
            y += 1
            yield 'b'

        @task
        def check(ctx, target_x, target_y, foo=foo, bar=bar):
            assert foo == ['f']
            assert bar == ['b']
            assert x == int(target_x)
            assert y == int(target_y)
.
        OP check 2 2
        " OP check 3 2
        " OP bar
        " OP check 4 3
    End
End
